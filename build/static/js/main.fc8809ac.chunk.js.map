{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","alert","message","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"2OAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCPpCK,EAAU,8BAuBD,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNV,WAAW,GAEb,OAAOK,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC0D5BK,EA1EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,UAMhBC,qBAAU,WACRC,IAAqBjB,MAAK,SAAAkB,GAAY,OAAIR,EAASQ,QAClD,IAEH,IAAMC,EAAcN,EAAUJ,EAAQA,EAAMW,QAAO,SAAAlC,GAAI,OAAIA,EAAKG,aAwB1DgC,EAAqB,SAAAvB,GACzB,IAAMZ,EAAOuB,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KAChC0B,EAAW,eAAQtC,EAAR,CAAcG,WAAYH,EAAKG,YAEhD4B,EACUnB,EAAI0B,GACXxB,MAAK,SAAAyB,GACJf,EAASD,EAAMiB,KAAI,SAAAxC,GAAI,OAAKA,EAAKY,KAAOA,EAAKZ,EAAOuC,SAErDE,OAAM,SAAAC,GACLC,MAAM,aAAD,OAAc3C,EAAKK,QAAnB,sCACLmB,EAASD,EAAMW,QAAO,SAAAG,GAAC,OAAIA,EAAEzB,KAAOA,UAW1C,OACE,6BACE,qCAEA,mBAXiB,SAAC,GAAiB,IAAfgC,EAAc,EAAdA,QACtB,OAAe,MAAXA,EACK,KAEF,yBAAKxC,UAAU,SAASwC,KAO7B,CAAcA,QAASf,IAEvB,6BACE,4BAAQvB,QAAS,kBAAMsB,GAAYD,KAAnC,QAAmDA,EAAU,YAAc,QAE7E,4BApDFM,EAAYO,KAAI,SAAAxC,GAAI,OAAI,kBAAC,EAAD,CAAM6C,IAAK7C,EAAKY,GAAIZ,KAAMA,EAAMC,iBAAkB,kBAAMkC,EAAmBnC,EAAKY,WAqDtG,0BAAMkC,SA/CM,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjB5C,QAASoB,EACTZ,MAAM,IAAIqC,MAAOC,cACjBhD,UAAWiD,KAAKC,SAAW,GAC3BzC,GAAIW,EAAM+B,OAAS,GAGrBvB,EAAmBkB,GAAYnC,MAAK,SAAAE,GAClCQ,EAASD,EAAMN,OAAOD,IACtBU,EAAW,SAqCT,2BAAO6B,MAAO9B,EAAS+B,SApDJ,SAAAT,GACvBrB,EAAWqB,EAAMU,OAAOF,UAoDpB,4BAAQG,KAAK,UAAb,W,MCpERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fc8809ac.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from 'axios';\nconst baseUrl = 'http://localhost:3001/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  };\n  return request.then(response => response.data.concat(nonExisting));\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport axios from 'axios';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...');\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => setNotes(initialNotes));\n  }, []);\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const rows = () =>\n    notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />);\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n\n    noteService.create(noteObject).then(data => {\n      setNotes(notes.concat(data));\n      setNewNote('');\n    });\n  };\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\n      })\n      .catch(error => {\n        alert(`the note '${note.content}' was already deleted from server`);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  };\n\n  const Notification = ({ message }) => {\n    if (message == null) {\n      return null;\n    }\n    return <div className=\"error\">{message}</div>;\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>show {showAll ? 'important' : 'all'}</button>\n      </div>\n      <ul>{rows()}</ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}